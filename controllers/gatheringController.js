const {db, sequelize} = require('../models/index');

// ÏñòÎÑ§ Ìò∏Ï∂ú Ï†ÑÏóêÎäî isLoggedIn ÌôïÏù∏
module.exports={
    showChatList: (req, res) => {
        // Í∑∏Î£π ÏÑ†ÌÉù.
        res.render("chatList");
    },

    selectRoom: (req, res)=>{
        console.log(req.body.roomId, 'Í∞Ä postÎ°ú Ï†ÑÎã¨ Î∞õÏùÄ Í∞íÏù¥Îã§.');
        res.locals.roomId = req.body.roomId; //res
        res.render("chat", {currentUser: req.user.mem_id, roomId: res.locals.roomId});
        // res.redirect("/chat/room");
        // roomIdÍ∞íÏùÑ Ïñ¥ÏºÄ Ï†ÑÎã¨ÌïòÎàÑ
    },
    checkMember: async(req, res, next)=>{
        res.locals.roomId = req.body.roomId;
        console.log('roomId: ', res.locals.roomId, 'mem_id: ', req.user.mem_id);
        isMember = await db.participant.findOne({
            where:{ gathering_id: res.locals.roomId, mem_id: req.user.mem_id}
        });
        console.log(isMember);
        if (!isMember) { res.redirect('/chat/list'); }
        next();
    },

    //‚úèÔ∏èÍ¥ÄÎ¶¨ÏûêÏö©, Í∑ºÎç∞ Í∑∏ÎÉ• gathering Î≥¥Ïó¨Ï£ºÎ©¥ ÎêòÎäî Í±∞ ÏïÑÎãàÏïº? Íµ≥Ïù¥ participatnÏóêÏÑú ÎΩëÏïÑÎÇº Ïù¥Ïú†Í∞Ä ÏûáÏñ¥?
    // showAllGatheringList: async(req, res)=>{
    //     const gatheringIDList = await db.participant.findAll();
    //     res.locals.gatheringID = gatheringIDList;
    //     res.json(gatheringIDList);
    // },

    // // Ï†ëÏÜçÌöåÏõêÏö©
    // showGatheringIDList: async(req, res)=>{     //Ï∞∏Í∞ÄÏûê Î™©Î°ùÏóêÏÑú Ï∞æÏïÑÏÑú Î™©Î°ùÏùÑ Ï∞æÎäî Í±∞ÏßÄ.
    //     // Ìù†,, Ï†ÑÏ≤¥ ÎßêÍ≥† ÌäπÏ†ï ÌöåÏõê ÏïåÍ≥†Ïã∂ÏúºÎ©¥.
    //     const gatheringIDList = await db.participant.findAll({
    //         where: {mem_id: req.user.mem_id} //id Î©§Î≤ÑÍ∞Ä Í∞ÄÏûÖÎêú Î™®ÏûÑ ÏïÑÏù¥Îîî Ï∞æÏïÑ
    //     });
    //     res.json(gatheringIDList);
    // },

    // // getGatheringInformation(Ïù¥Í±¥ Î∞©Ïû•Ïö©?)Ïù¥Îûë Í≤πÏ≥ê... Ïù¥Í±¥ ÏùºÎ∞ò Î©§Î≤ÑÏö©?
    // // getRooms
    // showGatheringList: async (req, res) => {
    //     try {
    //         const gatheringList = await db.gathering.findOne({
    //             where: {     // Î™®Îì† Î™®ÏûÑ Î≥¥Ïó¨Ï£ºÎäî Í≤É + ÌäπÏ†ï Î™®ÏûÑ Î≥¥Ïó¨Ï£ºÎäî Í≤É Ïñ¥ÏºÄÌïòÏßÄ?
    //                 gathering_id: req.body.gathering_id? req.body.gathering_id : 1=1    //1=1Ïù¥Í±∞ sqlÏù¥Îûë Í∞ôÏù¥ ÎêòÎÇò?
    //             }
    //         });
    //         res.json(gatheringList);
    //     }
    //     catch (err) {
    //         console.log(`Error loading gatheringList: ${err}`);
    //     }
    // },

    // // Î™®ÏûÑ ÏÉùÏÑ±ÌïòÍ∏∞
    // createGathering: async(req,res, next)=>{
    //     // Ï†ÑÎã¨ Î∞õÏùÑ Í≤É : name=Î™®ÏûÑÏù¥Î¶Ñ, leader_id = req.user, region= , place=, description:, headCount, image_url,
    //     // ÏñòÎÑ§Îäî ÎÇ¥Í∞Ä Ìï† Ïàò ÏûàÏùå create_date, update_date
    //     try{
    //         await sequelize.transaction(async t =>{
    //             await db.gathering.create({ //Ï†ÑÎã¨Î∞õÏùÄ Í±∞
    //                 name:'Î™®ÏûÑÏù¥Î¶Ñ', leader_id : req.body.leader_id, region:req.body.region+'Ïñ¥ÎîòÍ∏∞' ,
    //                 place:req.body.place+'ÎØ∏Ï†ï', description:req.body.description+'ÏôÄ ÎßõÏûàÍ≤†Îã§', headCount:req.body.headCount, image_url:req.body.image_url
    //                 //create_date = , update_date Ïñ¥Îîò„Ñ∑Í∞Ä ÏïåÏÑú,,,
    //             })
    //         })
    //         next();
    //     } catch(err){
    //         console.log(`Error creating gathering: ${err}`);
    //         next(err);
    //     }
    // },

    //     // ÏàòÏ†ïÏö© / ÌäπÏ†ïÌïú Î™®ÏûÑ Ï†ïÎ≥¥ Î∞õÏúºÎ†§Î©¥ 1) Ïù¥Î¶Ñ ÌïÑÏöîÌï¥. 
    // getGatheringInformation: async(req,res,next)=>{
    //     // Í∑∏Î£π idÎèÑ Í±¥ÎÑ§ Î∞õÏïÑÏïºÌï®.
    //     const info = await db.gathering.findOne({
    //         where:{
    //             gathering_id: req.body.gatheirng_id,
    //             leader_id: req.user.mem_id
    //         }
    //     });
    //     res.locals.gatheringInfo = info;
    //     res.json(info); //ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏Ïóê Ïñ¥ÏºÄ Ï£ºÏßÄ.
    // },

    // updateGatheringInformation: async(req, res, next)=>{
    //     const data = { //üíöÏ†ÑÎã¨Î∞õÏùÄ Í±∞
    //         name:'Î™®ÏûÑÏù¥Î¶Ñ', leader_id : req.body.leader_id, region:req.body.region+'Ïñ¥ÎîòÍ∏∞' ,
    //         place:req.body.place+'ÎØ∏Ï†ï', description:req.body.description+'ÏôÄ ÎßõÏûàÍ≤†Îã§', headCount:req.body.headCount, image_url:req.body.image_url
    //         //create_date = , update_date Ïñ¥Îîò„Ñ∑Í∞Ä ÏïåÏÑú,,,
    //     };
    //     try {
    //         await sequelize.transaction(async t => {
    //             await db.gathering.update(data,{
    //                 where: {
    //                     leader_id: req.user.mem_id,
    //                 },
    //                 transaction: t
    //             })
    //         });
    //         next();
    //     } catch (err) {
    //         console.log(`Error updating gathering information: ${err}`);
    //         next(err);
    //     }
    // },

    // deleteGathering: async(req,res)=>{
    //     // Ïó≠ÏãúÎÇò req.bodyÏóê ÏÇ≠Ï†úÌï† Í∑∏Î£π idÎèÑ ÏûàÏñ¥ÏïºÌï®.
    //     // 1) Î™®ÏûÑ ÏÇ≠Ï†ú = Ïù¥Í±¥ cascadeÎ°ú Ìï†Íπå. Î≤àÍ±∞Î°úÏö∞ÎãàÍπå.
    //     //‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è Í∑∏Î£π ÏÇ≠Ï†úÎê† ÎïåÎßå cascade??
    //     try{
    //         await sequelize.transaction(async t=>{
    //             await db.gathering.destory({
    //                 where: {
    //                     leader_id: req.user.mem_id,
    //                     gathering_id: req.body.gatheirng_id
    //                 }
    //             })
    //         })
    //     } catch(err){
    //         console.log(`Error deleting gathering: ${err}`);
    //     }
    //     //2) participantÏóêÏÑú Ìï¥Îãπ Í∑∏Î£π ÏÇ≠Ï†ú
    //     try{
    //         await sequelize.transaction(async t=>{
    //             await db.participant.destory({
    //                 where: {
    //                     gathering_id: req.body.gatheirng_id
    //                 }
    //             })
    //         })
    //     } catch(err){
    //         console.log(`Error deleting participant related gathering: ${err}`);
    //     }

    //     // 3) Ï±ÑÌåÖ Í∏∞Î°ù ÏÇ≠Ï†ú
    //     try{
    //         await sequelize.transaction(async t=>{
    //             await db.chat.destory({
    //                 where: {
    //                     gathering_id: req.body.gatheirng_id
    //                 }
    //             })
    //         })
    //     } catch(err){
    //         console.log(`Error deleting chat record related certain gathering: ${err}`);
    //     }

    // },
    // //Î©§Î≤Ñ, Í∑∏Î£πÏóê Ïã†Ï≤≠ÌïòÎäîÍ±¥? ÏöîÏ≤≠ Ïñ¥ÏºÄ Î≥¥ÎÇ¥. ÏöîÏ≤≠ Îòê Îã¥ÏïÑÏïºÌïòÎäîÍ±∞ÏñÄ???////////////„Ñπ„Ñπ„Ñπ„Ñπ


    // // ‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏èupdateÎÇò delete Ïãú, Ìä∏Î¶¨Í±∞ ÎßåÎì§Í∏∞!!!
    // // gathering ÌÖåÏù¥Î∏îÏóê currentHeadCountÎ•º count(*) where gathering_id = ÌäπÏ†ï ÏïÑÏù¥Îîî ÏùºÎïå
    // // Í∑∏Î†áÍ≤å ÌïòÎ©¥ allow, banMEmber Ìï† Îïå ÏùºÏùºÏù¥ Î≥ÄÍ≤Ω ÏïàÌï¥Ï§òÎèÑ ÎêòÏßÄ.
    // allowMember: async(req, res)=>{
    //     try{
    //         await sequelize.transaction(async t=>{
    //             await db.participant.create({
    //                 gatheirng_id: req.body.gatheirng_id,
    //                 mem_id: req.body.mem_id,
    //                 join_date: sequelize.literal(`NOW()`),
    //                 //isConnected: 0Ïù¥ ÎîîÌè¥Ìä∏
    //             })
    //         })
    //     } catch(err){
    //         console.log(`Error saving new gathering member: ${err}`);
    //     }
    // },

    // banMember: async(req, res)=>{
    //     try{
    //         await sequelize.transaction(async t=>{
    //             await db.participant.destory({
    //                 where: {
    //                     leader_id: req.body.mem_id,
    //                     gathering_id: req.body.gatheirng_id
    //                 }
    //             })
    //         })
    //     } catch(err){
    //         console.log(`Error deleting gathering member: ${err}`);
    //     }
    // },


    

    // Î∞©Ïû• ÎÇòÍ∞îÏùÑ Îïå,,,,
    // 1) participantÏóêÏÑú Î∞©Ïû• ÏÇ≠Ï†ú.
    //participantÏóê gatheringIdÎ°ú findOne(attributes: mem_id) Í∑∏ÏÇ¨ÎûåÏùÑ Î∞©Ïû•ÏúºÎ°ú Î∞îÍæ∏Ïûê.
    // newLeader: async(req, res)=>{
    //     ///*‚ù§Ô∏è*/ Í∏∞Ï°¥ Î∞©Ïû• id, ÏÉà Î∞©Ïû•id, Î™®ÏûÑ idÎèÑ req.bodyÏóê ÏûàÏñ¥ÏïºÌï¥
    //     const newLeader_id = await db.participant.findOne({
    //         attributes: ['mem_id'],
    //         where: {gatheirng_id:req.body.gatheirng_id}
    //     });
    //     try{
    //         await sequelize.transaction(async t=>{
    //             await db.gathering.update({leader_id: newLeader_id},{ 
    //                 where: {
    //                     leader_id: req.user.oldLeader_id,/*‚ù§Ô∏è*/
    //                     gathering_id: req.body.gatheirng_id
    //                 }
    //             })
    //         })
    //     } catch(err){
    //         console.log(`Error enrolling new leader of gathering: ${err}`);
    //     }
    // }

}